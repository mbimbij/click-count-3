name: Application Pipeline
on:
  - push
  - workflow_dispatch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      application: ${{ steps.filter.outputs.application }}
      deploy: ${{ steps.filter.outputs.deploy }}
      imageName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.latest_docker_tag.outputs.docker_tag }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            application:
              - 'src/**'
              - 'pom.xml'
            deploy:
              - 'deploy/**'
      - name: Get latest Docker tag
        id: latest_docker_tag
        run: |
          echo ::set-output name=docker_tag::"$(curl -s -H 'Authorization: Token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/users/${{ github.actor }}/packages/container/click-count/versions | jq -r '.[0].metadata.container.tags[0]')"

  build:
    needs: changes
    if: ${{ needs.changes.outputs.application == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.2
        with:
          maven-version: 3.8.4
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: build .war artifact
        run: mvn clean package
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: target/surefire-reports/*.xml
      - name: Log in to the Container registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.6.2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
      - name: Build and push Docker image
        uses: docker/build-push-action@v2.8.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_staging:
    needs:
      - build
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      image_fullname: ${{ needs.build.outputs.imageName }}
    secrets:
      application_name: ${{ secrets.APPLICATION_NAME }}
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws_region: ${{ secrets.AWS_REGION }}
      redis_host: ${{ secrets.REDIS_HOST }}

  build_production:
    needs:
      - build
      - build_staging
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image_fullname: ${{ needs.build.outputs.imageName }}
    secrets:
      application_name: ${{ secrets.APPLICATION_NAME }}
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws_region: ${{ secrets.AWS_REGION }}
      redis_host: ${{ secrets.REDIS_HOST }}

  deploy_staging:
    needs:
      - changes
    if: ${{ needs.changes.outputs.deploy == 'true' }}
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      image_fullname: ${{ needs.changes.outputs.imageName }}
    secrets:
      application_name: ${{ secrets.APPLICATION_NAME }}
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws_region: ${{ secrets.AWS_REGION }}
      redis_host: ${{ secrets.REDIS_HOST }}

  deploy_production:
    needs:
      - changes
      - deploy_staging
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image_fullname: ${{ needs.changes.outputs.imageName }}
    secrets:
      application_name: ${{ secrets.APPLICATION_NAME }}
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      aws_region: ${{ secrets.AWS_REGION }}
      redis_host: ${{ secrets.REDIS_HOST }}
